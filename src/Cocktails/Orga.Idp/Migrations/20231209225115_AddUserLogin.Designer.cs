// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Orga.Idp.DbContexts;

#nullable disable

namespace Orga.Idp.Migrations
{
    [DbContext(typeof(IdentityDbContext))]
    [Migration("20231209225115_AddUserLogin")]
    partial class AddUserLogin
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.25");

            modelBuilder.Entity("Orga.Idp.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityCode")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SecurityCodeExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Subject")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("57d1c22c-032b-4846-b681-a19db26a5ec6"),
                            Active = true,
                            ConcurrencyStamp = "cbbddc73-a66a-4817-a171-b918772d6e68",
                            Email = "johnny@emailprovider.com",
                            Password = "password",
                            SecurityCodeExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Subject = "ac46ef56-2155-4d0b-afd0-d10c5e7c89b1",
                            UserName = "Johnny"
                        },
                        new
                        {
                            Id = new Guid("56c70a51-30a3-4b4f-99b5-87585454c5e8"),
                            Active = true,
                            ConcurrencyStamp = "4dcd8f2c-5399-465b-8a6f-671f4ca47a75",
                            Email = "linda@emailprovider.com",
                            Password = "password",
                            SecurityCodeExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Subject = "bcc4c51b-d20b-41dc-8152-cc7ed69c62c7",
                            UserName = "Linda"
                        });
                });

            modelBuilder.Entity("Orga.Idp.Entities.UserClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c2ea18fe-f7a7-479b-ab82-8ed68a527ce2"),
                            ConcurrencyStamp = "b5f8dfa7-e9dd-4772-b4f9-70d87118dd40",
                            Type = "given_name",
                            UserId = new Guid("57d1c22c-032b-4846-b681-a19db26a5ec6"),
                            Value = "Johnny"
                        },
                        new
                        {
                            Id = new Guid("5368e843-0250-41d3-b45e-64b7fbc83c30"),
                            ConcurrencyStamp = "bd583cb8-69a9-406c-932c-7edcbee09639",
                            Type = "family_name",
                            UserId = new Guid("57d1c22c-032b-4846-b681-a19db26a5ec6"),
                            Value = "Oldman"
                        },
                        new
                        {
                            Id = new Guid("7d5eb2d3-5fea-44de-acb1-b9679f2e77d9"),
                            ConcurrencyStamp = "519a3367-92c5-40a2-9851-ba08ae607e65",
                            Type = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth",
                            UserId = new Guid("57d1c22c-032b-4846-b681-a19db26a5ec6"),
                            Value = "11/06/2003"
                        },
                        new
                        {
                            Id = new Guid("a68ac04e-0a53-4347-bbd3-f43980787750"),
                            ConcurrencyStamp = "c64ad401-35bf-4dfc-9975-eea487a1c749",
                            Type = "role",
                            UserId = new Guid("57d1c22c-032b-4846-b681-a19db26a5ec6"),
                            Value = "admin"
                        },
                        new
                        {
                            Id = new Guid("1459a0f4-7de9-4155-9ffa-cc695cd54abe"),
                            ConcurrencyStamp = "d50e2d26-9e46-4645-ab4b-0456af1a338f",
                            Type = "country",
                            UserId = new Guid("57d1c22c-032b-4846-b681-a19db26a5ec6"),
                            Value = "pt"
                        },
                        new
                        {
                            Id = new Guid("4e2404c2-ca3d-4f4a-9613-913ac8e36268"),
                            ConcurrencyStamp = "994f67f5-37e5-4d5b-bcfb-179f578d3247",
                            Type = "given_name",
                            UserId = new Guid("56c70a51-30a3-4b4f-99b5-87585454c5e8"),
                            Value = "Linda"
                        },
                        new
                        {
                            Id = new Guid("3f05c5e9-9712-4705-bb2c-5acc043b799f"),
                            ConcurrencyStamp = "17596e1c-83c5-43cf-b245-df7f1e82fd4c",
                            Type = "family_name",
                            UserId = new Guid("56c70a51-30a3-4b4f-99b5-87585454c5e8"),
                            Value = "Young"
                        },
                        new
                        {
                            Id = new Guid("eb133b25-e0cb-4c49-9cb1-3306aa0eb08e"),
                            ConcurrencyStamp = "b82f46a2-416a-4efa-a11a-7331ec11d9ca",
                            Type = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth",
                            UserId = new Guid("56c70a51-30a3-4b4f-99b5-87585454c5e8"),
                            Value = "11/06/2013"
                        },
                        new
                        {
                            Id = new Guid("50e08f99-feeb-4d06-b129-04d404e31919"),
                            ConcurrencyStamp = "0e873c3e-04a3-4c64-adfd-35660593b596",
                            Type = "role",
                            UserId = new Guid("56c70a51-30a3-4b4f-99b5-87585454c5e8"),
                            Value = "user"
                        },
                        new
                        {
                            Id = new Guid("5db08309-f4ad-4f09-a9f4-3e907870e5c8"),
                            ConcurrencyStamp = "84189f76-f241-425f-8e87-c4a816c6958d",
                            Type = "country",
                            UserId = new Guid("56c70a51-30a3-4b4f-99b5-87585454c5e8"),
                            Value = "nl"
                        });
                });

            modelBuilder.Entity("Orga.Idp.Entities.UserLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderIdentityKey")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Orga.Idp.Entities.UserClaim", b =>
                {
                    b.HasOne("Orga.Idp.Entities.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Orga.Idp.Entities.UserLogin", b =>
                {
                    b.HasOne("Orga.Idp.Entities.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Orga.Idp.Entities.User", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");
                });
#pragma warning restore 612, 618
        }
    }
}
